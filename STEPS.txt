1- create worker node to simulate vehicles signals and push it to Elasticache(Redis).

2- create subscriber node to get the signal comming from vehicles (through Redis) and use sockets emit 
    to send to the client node (we are going to create) for live montring.

3- create docker-compose.yml and add redis image & specify both worker & ubscriber services.
    Result Should be like : ./STEPS/01-worker_subscriber.PNG .

4- create the client node and make sure sockets signals (step no 2) are working fine.
    use : create-react-app & install react.io-client npm package

5- create nginx to work as (routing proxy server) and another one for the client it self.
    Result Should be like : ./STEPS/02-adding _client.PNG .

6- add production docker files in order to be used by travis (next step)
    for - node services : in this example >> we only change npm run dev (nodemon) to npm run start.
    for - client : we use multi-step docker builds.

7- CI/CD Approch: 
    > Git(push to master).
    > Travis build dev images & Run tests (Overriding Startup Command).
    > After All Tests Passes With Exist Code 0 => Travis build Prod Images.
    > Travis Deploys Prod Images to Dockerhub.
    > AWS BeanStalk gets notified and pull the images & run the containers

8- Before CD Steps:
    - SYNC your GIT account with Travis.
    - Check the repo you want to use
    - Repository Settings > Environment Variables 
        > add DOCKER_ID , DOCKER_PASS to push your prod/build images to docker hub.
        > add AWS_ACCESS_KEY , AWS_SECRET_KEY (Provided from aws Beanstalk deployment user - programatic access)
    - Create Security Group first and allow all ports we going to need like (6379) for redis , (5432 & 5435) for postgres DBs.
    - MAKE SURE : All AWS Resources (Redis , Postgres , Beanstalk) in the same VPC and Having same Security Group.
    - Create ElastiCache Redis & get Primary Endpoint url & Port.
    - Create Elastic Beanstalk Multi-Docker Container Deployment Environment.
    - Choose additional Configuration > Modify Application's Environment Software & add Environment Variables : REDIS_HOST , REDIS_PORT.

9- add Customer node and write queries to get Customers/FilteredCustomers from its own Postgres DB (Customers_db).
10-add Vehicle node and write queries to get Vehicles/FilteredVehicles from its own Postgres Db (Vehicles_db).

> NOTE: IN BOTH docker-compose.yml & .travis.yml : we need only one postgres service to make sure our process is working fine.
        > but, in AWS > RDS > Postgres > we are going to create two DBs (Customers_db , Vehicles_db).
11- NOW, create the two aws postgres Dbs and add aws Elastic Beanstalk Environment Variables for created Dbs.
